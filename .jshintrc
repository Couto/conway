{
    // Enforcing Options
    "bitwise"   : true,     // This option prohibits the use of bitwise operators such as ^ (XOR), | (OR) and others. Bitwise operators are very rare in JavaScript programs and very often & is simply a mistyped &&.
    "camelcase" : true,     // This option allows you to force all variable names to use either camelCase style or UPPER_CASE with underscores.
    "curly"     : true,     // This option requires you to always put curly braces around blocks in loops and conditionals.
    "eqeqeq"    : true,     // This options prohibits the use of == and != in favor of === and !==.
    "forin"     : true,     // This option requires all for in loops to filter object's items.
    "immed"     : true,     // This option prohibits the use of immediate function invocations without wrapping them in parentheses.
    "indent"    : 4,        // This option enforces specific tab width for your code
    "latedef"   : true,     // This option prohibits the use of a variable before it was defined.
    "newcap"    : true,     // This option requires you to capitalize names of constructor functions.
    "noarg"     : true,     // This option prohibits the use of arguments.caller and arguments.callee.
    "noempty"   : true,     // This option warns when you have an empty block in your code.
    "nonew"     : true,     // This option prohibits the use of constructor functions for side-effects. Some people like to call constructor functions without assigning its result to any variable
    "plusplus"  : true,     // This option prohibits the use of unary increment and decrement operators. Some people think that ++ and -- reduces the quality of their coding styles and there are programming languages—such as Python—that go completely without these operators.
    "quotmark"  : "single", // This option enforces the consistency of quotation marks used throughout your code.
    "regexp"    : true,     // This option prohibits the use of unsafe . in regular expressions.
    "undef"     : true,     // This option prohibits the use of explicitly undeclared variables.
    "unused"    : true,     // This option warns when you define and never use your variables.
    "strict"    : true,     // This option requires all functions to run in EcmaScript 5's strict mode.
    "trailing"  : true,     // This option makes it an error to leave a trailing whitespace in your code.

    // Relaxing Options (lol)
    "asi"           : false,    // This option suppresses warnings about missing semicolons.
    "boss"          : false,    // This option suppresses warnings about the use of assignments in cases where comparisons are expected. More often than not, code like if (a = 10) {} is a typo.
    "debug"         : false,    // This option suppresses warnings about the debugger statements in your code.
    "eqnull"        : false,    // This option suppresses warnings about == null comparisons
    "es5"           : false,    // This option tells JSHint that your code uses ECMAScript 5 specific features such as getters and setters. Note that not all browsers implement these features.
    "esnext"        : false,    // This option tells JSHint that your code uses ES.next specific features such as const. Note that these features are not finalized yet and not all browsers implement them.
    "evil"          : false,    // This option suppresses warnings about the use of eval. The use of eval is discouraged because it can make your code vulnerable to various injection attacks and it makes it hard for JavaScript interpreter to do certain optimizations.
    "expr"          : false,    // This option suppresses warnings about the use of expressions where normally you would expect to see assignments or function calls. Most of the time, such code is a typo.
    "funcscope"     : false,    // This option suppresses warnings about declaring variables inside of control structures while accessing them later from the outside. Even though JavaScript has only two real scopes—global and function—such practice leads to confusion among people new to the language and hard-to-debug bugs.
    "globalstrict"  : false,    // This option suppresses warnings about the use of global strict mode. Global strict mode can break third-party widgets so it is not recommended.
    "iterator"      : false,    // This option suppresses warnings about the __iterator__ property. This property is not supported by all browsers so use it carefully.
    "lastsemic"     : false,    // This option suppresses warnings about missing semicolons, but only when the semicolon is omitted for the last statement in a one-line block
    "laxbreak"      : false,    // This option suppresses most of the warnings about possibly unsafe line breakings in your code. It doesn't suppress warnings about comma-first coding style.
    "laxcomma"      : false,    // This option suppresses warnings about comma-first coding style
    "loopfunc"      : false,    // This option suppresses warnings about functions inside of loops. Defining functions inside of loops can lead to bugs
    "multistr"      : false,    // This option suppresses warnings about multi-line strings. Multi-line strings can be dangerous in JavaScript because all hell breaks loose if you accidentally put a whitespace in between the escape character (\) and a new line.
    "onecase"       : false,    // This option suppresses warnings about switches with just one case. Most of the time you want to use if instead of switch if there is only one case
    "proto"         : false,    // This option suppresses warnings about the __proto__ property. This property is deprecated and not supported by all browsers.
    "regexdash"     : false,    // This option suppresses warnings about unescaped - in the end of regular expressions.
    "scripturl"     : false,    // This option suppresses warnings about the use of script-targeted URLs—such as javascript:....
    "smarttabs"     : false,    // This option suppresses warnings about mixed tabs and spaces when the latter are used for alignmnent only.
    "shadow"        : false,    // This option suppresses warnings about variable shadowing i.e. declaring a variable that had been already declared somewhere in the outer scope.
    "sub"           : false,    // This option suppresses warnings about using [] notation when it can be expressed in dot notation: person['name'] vs. person.name.
    "supernew"      : false,    // This option suppresses warnings about "weird" constructions like new function () { ... } and new Object;
    "validthis"     : false,    // This option suppresses warnings about possible strict violations when the code is running in strict mode and you use this in a non-constructor function.

    // Enviroments (yes... reinforcing that it uses no libraries!)
    "browser"       : true,     // This option defines globals exposed by modern browsers: all the way from good ol' document and navigator to the HTML5 FileReader and other new developments in the browser world.
    "couch"         : false,    // This option defines globals exposed by CouchDB. CouchDB is a document-oriented database that can be queried and indexed in a MapReduce fashion using JavaScript.
    "devel"         : false,    // This option defines globals that are usually used for logging poor-man's debugging: console, alert, etc. It is usually a good idea to not ship them in production because, for example, console.log breaks in legacy versions of Internet Explorer.
    "dojo"          : false,    // This option defines globals exposed by the Dojo Toolkit.
    "jquery"        : false,    // This option defines globals exposed by the jQuery JavaScript library.
    "mootools"      : false,    // This option defines globals exposed by the MooTools JavaScript framework.
    "node"          : false,    // This option defines globals available when your code is running inside of the Node runtime environment. Node.js is a server-side JavaScript environment that uses an asynchronous event-driven model.
    "nonstandard"   : false,    // This option defines non-standard but widely adopted globals such as escape and unescape.
    "prototypejs"   : false,    // This option defines globals exposed by the Prototype JavaScript framework.
    "rhino"         : false,    // This option defines globals available when your code is running inside of the Rhino runtime environment. Rhino is an open-source implementation of JavaScript written entirely in Java.
    "worker"        : false,    // This option defines globals available when your code is running inside of a Web Worker. Web Workers provide a simple means for web content to run scripts in background threads.
    "wsh"           : false,     // This option defines globals available when your code is running as a script for the Windows Script Host.

    //Legacy (I'm a JSLint fan)
    "nomen"     : true,     // This option disallows the use of dangling _ in variables. We don't know why would you need it.
    "onevar"    : true,     // This option allows only one var statement per function
    "passfail"  : false,    // This option makes JSHint stop on the first error or warning.
    "white"     : true,     // This option make JSHint check your source code against Douglas Crockford's JavaScript coding style.

    // Extra globals
    "predef" : [
        "require",
        "define"
    ]
}
